# habilidades.py

from atributos import Atributos
from rolagem import Rolagem


# ğŸ“œ Lista padrÃ£o de perÃ­cias D&D 5e
PERICIAS = {
    'Acrobacia': 'Destreza',
    'Arcanismo': 'InteligÃªncia',
    'Atletismo': 'ForÃ§a',
    'AtuaÃ§Ã£o': 'Carisma',
    'EnganaÃ§Ã£o': 'Carisma',
    'Furtividade': 'Destreza',
    'HistÃ³ria': 'InteligÃªncia',
    'IntimidaÃ§Ã£o': 'Carisma',
    'IntuiÃ§Ã£o': 'Sabedoria',
    'InvestigaÃ§Ã£o': 'InteligÃªncia',
    'Lidar com Animais': 'Sabedoria',
    'Medicina': 'Sabedoria',
    'Natureza': 'InteligÃªncia',
    'PercepÃ§Ã£o': 'Sabedoria',
    'PersuasÃ£o': 'Carisma',
    'PrestidigitaÃ§Ã£o': 'Destreza',
    'ReligiÃ£o': 'InteligÃªncia',
    'SobrevivÃªncia': 'Sabedoria'
}


class Habilidades:
    """
    Gerencia perÃ­cias, testes de atributos e salvaguardas.
    """
    def __init__(self, atributos: Atributos, proficiencia=2):
        """
        atributos: instÃ¢ncia de Atributos
        proficiencia: bÃ´nus de proficiÃªncia (nÃ­vel do personagem)
        """
        self.atributos = atributos
        self.proficiencia = proficiencia

        # PerÃ­cias treinadas
        self.pericias_treinadas = []

        # Salvaguardas treinadas (resistÃªncias)
        self.salvaguardas_treinadas = []

    # ğŸš© ----- GestÃ£o de perÃ­cias e salvaguardas -----

    def treinar_pericia(self, nome):
        if nome in PERICIAS:
            self.pericias_treinadas.append(nome)
        else:
            raise ValueError(f"PerÃ­cia '{nome}' nÃ£o existe.")

    def treinar_salvaguarda(self, atributo):
        if atributo in self.atributos.atributos:
            self.salvaguardas_treinadas.append(atributo)
        else:
            raise ValueError(f"Atributo '{atributo}' invÃ¡lido.")

    # ğŸš© ----- Rolagens -----

    def teste_pericia(self, nome, vantagem=None):
        """
        Rola um teste de perÃ­cia.
        """
        if nome not in PERICIAS:
            raise ValueError(f"PerÃ­cia '{nome}' nÃ£o existe.")

        atributo = PERICIAS[nome]
        bonus = self.atributos.modificador(atributo)

        if nome in self.pericias_treinadas:
            bonus += self.proficiencia

        resultado = Rolagem.rolar_ataque(bonus, vantagem)
        return resultado

    def teste_atributo(self, atributo, vantagem=None):
        """
        Teste bruto de atributo (sem perÃ­cia).
        """
        if atributo not in self.atributos.atributos:
            raise ValueError(f"Atributo '{atributo}' invÃ¡lido.")

        bonus = self.atributos.modificador(atributo)
        resultado = Rolagem.rolar_ataque(bonus, vantagem)
        return resultado

    def salvaguarda(self, atributo, vantagem=None):
        """
        Teste de resistÃªncia (salvaguarda).
        """
        if atributo not in self.atributos.atributos:
            raise ValueError(f"Atributo '{atributo}' invÃ¡lido.")

        bonus = self.atributos.modificador(atributo)
        if atributo in self.salvaguardas_treinadas:
            bonus += self.proficiencia

        resultado = Rolagem.rolar_ataque(bonus, vantagem)
        return resultado

    # ğŸš© ----- VisualizaÃ§Ã£o -----

    def listar_pericias(self):
        """
        Lista perÃ­cias e seus bÃ´nus atuais.
        """
        linhas = []
        for nome, atributo in PERICIAS.items():
            mod = self.atributos.modificador(atributo)
            bonus = mod + (self.proficiencia if nome in self.pericias_treinadas else 0)
            linhas.append(f"{nome} ({atributo}): {bonus:+}")
        return linhas

    def listar_salvaguardas(self):
        """
        Lista salvaguardas e seus bÃ´nus.
        """
        linhas = []
        for atributo in self.atributos.atributos.keys():
            mod = self.atributos.modificador(atributo)
            bonus = mod + (self.proficiencia if atributo in self.salvaguardas_treinadas else 0)
            linhas.append(f"{atributo}: {bonus:+}")
        return linhas


# ğŸš€ Teste rÃ¡pido do mÃ³dulo
if __name__ == "__main__":
    from atributos import Atributos

    atributos = Atributos(forca=14, destreza=12, constituicao=13,
                           inteligencia=10, sabedoria=16, carisma=8)

    habilidades = Habilidades(atributos, proficiencia=2)

    habilidades.treinar_pericia('PercepÃ§Ã£o')
    habilidades.treinar_pericia('Furtividade')
    habilidades.treinar_salvaguarda('Sabedoria')
    habilidades.treinar_salvaguarda('ConstituiÃ§Ã£o')

    print("=== PerÃ­cias ===")
    for linha in habilidades.listar_pericias():
        print(linha)

    print("\n=== Salvaguardas ===")
    for linha in habilidades.listar_salvaguardas():
        print(linha)

    print("\nTeste de PercepÃ§Ã£o (com vantagem):")
    r = habilidades.teste_pericia('PercepÃ§Ã£o', vantagem=True)
    print(Rolagem.rolagem_texto(r))

    print("\nTeste de Salvaguarda de ConstituiÃ§Ã£o:")
    r = habilidades.salvaguarda('ConstituiÃ§Ã£o')
    print(Rolagem.rolagem_texto(r))
